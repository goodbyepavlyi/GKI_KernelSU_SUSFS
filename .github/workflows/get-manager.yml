name: GetManager
permissions:
  contents: write
  actions: read

on:
  workflow_call:
    inputs:
      kernelsu_variant:
        required: true
        type: string

jobs:
  get_ksu_manager:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      # Prefer your own PAT if you need to access another repo:
      GH_TOKEN: ${{ secrets.PERSONAL_TOKEN || secrets.GITHUB_TOKEN }}

    steps:
      - name: 安装依赖
        run: sudo apt update && sudo apt install -y git curl jq unzip

      - name: 设定 KSU 环境变量
        run: |
          if [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "This is the Next variant"
            git clone https://github.com/KernelSU-Next/KernelSU-Next.git
            cd KernelSU-Next
            KSU_GIT_VERSION=$(git rev-list --count HEAD)
            KSU_VERSION=$((10000 + KSU_GIT_VERSION + 200))
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "This is the SukiSU variant"
            git clone https://github.com/SukiSU-Ultra/SukiSU-Ultra.git
            cd SukiSU-Ultra
            KSU_GIT_VERSION=$(git rev-list --count HEAD)
            KSU_VERSION=$((10000 + KSU_GIT_VERSION + 700))
          else
            echo "Unknown variant"
            exit 1
          fi

          echo "KSU_VERSION=$KSU_VERSION" >> $GITHUB_ENV

      - name: 添加 KernelSU
        run: |
          if [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "KernelSU Next..."
            REPO="KernelSU-Next/KernelSU-Next"
            FILENAME="build-manager-ci.yml"
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "SukiSU..."
            REPO="SukiSU-Ultra/SukiSU-Ultra"
            FILENAME="build-manager.yml"
          fi

          echo "Using repo: $REPO, workflow: $FILENAME"

          # 获取最新成功构建的 ID
          BUILD_ID=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO/actions/workflows/$FILENAME/runs?status=success" | \
            jq -r '.workflow_runs[0].id')

          echo "BUILD_ID=$BUILD_ID"

          # 获取该构建的 Artifacts
          ARTIFACTS=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO/actions/runs/$BUILD_ID/artifacts")

          echo "Found $(echo "$ARTIFACTS" | jq '.artifacts | length') artifacts."

          DOWNLOAD_URL=$(echo "$ARTIFACTS" | jq -r '.artifacts[] | select(.name | contains("manager")) | .archive_download_url')
          echo "DOWNLOAD_URL=$DOWNLOAD_URL"

          if [ -z "$DOWNLOAD_URL" ] || [ "$DOWNLOAD_URL" == "null" ]; then
            echo "Failed to obtain download URL for Manager artifact"
            exit 1
          fi

          # 下载 Manager 文件
          curl -L -H "Authorization: token $GH_TOKEN" \
            -o "${{ inputs.kernelsu_variant }}-管理器(${{ env.KSU_VERSION }}).zip" \
            "$DOWNLOAD_URL"

          echo "Manager 文件已下载为：${{ inputs.kernelsu_variant }}-管理器(${{ env.KSU_VERSION }}).zip"
          unzip -o "*.zip"

      - name: 上传编译资产
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.kernelsu_variant }}-Manager(${{ env.KSU_VERSION }})
          path: |
            *.apk
